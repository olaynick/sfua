import os
import pathlib

def collect_files_content(folder_path, output_file="project_content.txt"):
    """
    –°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª
    """
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    supported_extensions = {'.html', '.css', '.js','.json', '.xml'}
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
    folder_path = os.path.abspath(folder_path)
    
    with open(output_file, 'w', encoding='utf-8') as output:
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
        all_files = []
        for root, dirs, files in os.walk(folder_path):
            for file in files:
                file_path = os.path.join(root, file)
                file_ext = pathlib.Path(file).suffix.lower()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ —Å–∞–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                if (file.startswith('.') or file == output_file or 
                    file.startswith('__') or file == 'Thumbs.db'):
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª, –¥–∞–∂–µ –µ—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
                all_files.append(file_path)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        for file_path in all_files:
            try:
                relative_path = os.path.relpath(file_path, folder_path)
                file_ext = pathlib.Path(file_path).suffix.lower()
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–∞–π–ª–∞
                output.write(f"\n{relative_path}:\n")
                output.write("-" * 50 + "\n")
                
                # –ß–∏—Ç–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read()
                    output.write(content)
                    output.write("\n\n")
                    
            except Exception as e:
                output.write(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}\n\n")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∫–æ–Ω—Ü–µ
        output.write("\n" + "="*60 + "\n")
        output.write("–°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê:\n")
        output.write("="*60 + "\n")
        generate_directory_tree(folder_path, output)

def generate_directory_tree(start_path, output_file, prefix=''):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ASCII —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–æ–≤
    """
    if not os.path.exists(start_path):
        output_file.write(f"–ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {start_path}\n")
        return
    
    if os.path.isfile(start_path):
        output_file.write(f"{prefix}üìÑ {os.path.basename(start_path)}\n")
        return
    
    items = os.listdir(start_path)
    items = [item for item in items if not item.startswith('.') and item != '__pycache__']
    items.sort()
    
    for i, item in enumerate(items):
        path = os.path.join(start_path, item)
        is_last = i == len(items) - 1
        
        if os.path.isdir(path):
            output_file.write(f"{prefix}{'‚îî‚îÄ‚îÄ ' if is_last else '‚îú‚îÄ‚îÄ '}üìÅ {item}/\n")
            new_prefix = prefix + ('    ' if is_last else '‚îÇ   ')
            generate_directory_tree(path, output_file, new_prefix)
        else:
            output_file.write(f"{prefix}{'‚îî‚îÄ‚îÄ ' if is_last else '‚îú‚îÄ‚îÄ '}üìÑ {item}\n")

if __name__ == "__main__":
    # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–π –ø–∞–ø–∫–µ
    folder_to_scan = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏): ").strip()
    
    if not folder_to_scan:
        folder_to_scan = "."
    
    if os.path.exists(folder_to_scan):
        output_filename = "project_content.txt"
        collect_files_content(folder_to_scan, output_filename)
        print(f"–§–∞–π–ª {output_filename} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    else:
        print("–£–∫–∞–∑–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")